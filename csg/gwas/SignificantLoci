import sys
import argparse
import gzip
from csg.intervaltree.IntervalTree import *

argparser = argparse.ArgumentParser('Get non-overlapping loci around most significant association signals.')
argparser.add_argument('--in', metavar = 'file', dest = 'assoc_file', required = True, type = str, help = 'Input file with association results e.g. METAL format.')
argparser.add_argument('--id-field', metavar = 'name', dest = 'id_field', required = True, type = str, help = 'Field that stores chromosome variant name. Variant name must be CHR:POSITION:REF_ALLELE:ALT_ALLELE, where REF_ALLELE and ALT_ALLELE are optional.')
argparser.add_argument('--pvalue-field', metavar = 'name', dest = 'pvalue_field', required = True, type = str, help = 'Field that stores P-value.')
argparser.add_argument('--sep', metavar = 'name', dest = 'sep', required = True, choices = ['comma', 'semicolon', 'tab', 'whitespace'], help = 'Fields separator. Supported values: comma, semicolon, tab, whitespace.')
argparser.add_argument('--min-locus-size', metavar = 'bp', dest = 'min_locus_size', required = True, type = long, help = 'Minimal locus size. Measured in base-pairs as lead (i.e. most signifcant association) variant +/- 0.5 * min-locus_size.')
argparser.add_argument('--max-pvalue', metavar = 'float', dest = 'max_pvalue', required = True, type = float, help = 'P-value significance threshold.')
argparser.add_argument('--out', metavar = 'file', dest = 'out_file', required = True, type = str, help = 'Output file name. LocusStart and LocusEnd are appended to the original fields.')


def get_associations(assoc_file):
   with gzip.GzipFile(assoc_file, 'r') as ifile:
      line = ifile.readline()
      if line is None:
         return
      header = line.rstrip().split('\t')
      for line in ifile:
         fields = dict(zip(header, line.rstrip().split('\t')))
         chrom, position, ref, alt = fields['MarkerName'].split(':')
         pvalue = fields['P-value']
         yield Association(chrom = chrom, position = long(position), ref = ref , alt = alt, pvalue = float(pvalue))


def write_associations(associations, out_file):
   with open(out_file, 'w') as ofile:
      ofile.write('CHROM\tPOSITION\tREF\tALT\tPVALUE\n')
      for association in associations:
         ofile.write('%s\t%d\t%s\t%s\t%g\n' % association)


def load_signficant_associations(assoc_file, id_field, pvalue_field, sep, max_pvalue):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)

   with gzip.GzipFile(assoc_file, 'r') as ifile:
      line = ifile.readline()
      if line is None:
         return
      header = line.rstrip().split(sep_char)
        
      try:
         id_field_idx = header.index(id_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % id_field)

      try:
         pvalue_field_idx = header.index(pvalue_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % pvalue_field)

      for line in ifile:
         fields = line.rstrip().split(sep_char)
         pvalue = float(fields[pvalue_field_idx])
         marker = fields[id_field_idx].split(':')
         chrom = marker[0]
         position = long(marker[1])
         if pvalue < max_pvalue:
            yield (chrom, position, pvalue, fields)


def extract_loci(significant_associations, min_locus_size):
   associations_by_chrom = dict()
   for variant in significant_associations:
      chrom = variant[0]
      if chrom not in associations_by_chrom:
         associations_by_chrom[chrom] = list()
      associations_by_chrom[chrom].append(variant)

   for chrom, variants in associations_by_chrom.iteritems():
      intervals = IntervalTree()
      variants.sort(key = lambda x: x[2])
      for variant in variants:
         if not any(intervals.point_intersect(variant[1])):
            intervals.add(variant[1] - long(min_locus_size / 2.0), variant[1] + long(min_locus_size / 2.0), variant)
      merged_intervals = intervals.merge()
      for interval in merged_intervals.ascending():
         min_pvalue = sys.float_info.max
         min_pvalue_variant = None
         for variant in interval.values:
            if variant[2] < min_pvalue:
               min_pvalue = variant[2]
               min_pvalue_row = variant
         locus = list(variant[3])
         locus.append(str(interval.start))
         locus.append(str(interval.end))
         yield locus


def write_loci(loci, assoc_file, sep, out_file):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)
   with gzip.GzipFile(assoc_file, 'r') as ifile:
      header = ifile.readline()
      if header is not None:
         header = header.rstrip()
   with open(out_file, 'w') as ofile:
      if header is not None:
         ofile.write('%s%cLocusStart%cLocusEnd\n' % (header, sep_char, sep_char))
      for locus in loci:
         ofile.write('%s\n' % sep_char.join(locus))


if __name__ == '__main__':
   args = argparser.parse_args()
   loci = (extract_loci(load_signficant_associations(args.assoc_file, args.id_field, args.pvalue_field, args.sep, args.max_pvalue), args.min_locus_size))
   write_loci(loci, args.assoc_file, args.sep, args.out_file)
