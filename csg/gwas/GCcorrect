import argparse
import gzip
import os
import scipy.stats
from csg.gwas.inflation import *
from csg.intervaltree.IntervalTree import *

argparser = argparse.ArgumentParser('Corrects p-values and outputs corrected values to the new field.')
argparser.add_argument('--file', metavar = 'file', dest = 'in_file', required = True, help = 'Input file compressed using gzip/bgzip.')
argparser.add_argument('--pvalue', metavar = 'name', dest = 'pvalue_field', required = True, help = 'Field that stores p-values.')
argparser.add_argument('--corrected-pvalue', metavar = 'name', dest = 'corrected_pvalue_field', required = True, help = 'Field that will store corrected p-values.')
argparser.add_argument('--correction-factor', metavar = 'float', dest = 'correction_factor', type = float, required = True, help = 'Correction factor e.g. GC lambda.')
argparser.add_argument('--sep', metavar = 'separator', dest = 'sep', required = True, choices = ['tab', 'whitespace', 'comma', 'semicolon'], help = 'Field separator: tab, whitespace, comma, semicolon.')
argparser.add_argument('--out', metavar = 'file', dest = 'out_file', required = True, help = 'Output file compressed using gzip.')


def correct(in_file, pvalue_field, corrected_pvalue_field, sep, correction_factor, out_file):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)

   with gzip.GzipFile(in_file, 'r') as ifile, gzip.GzipFile(out_file, 'w') as ofile:
      header = ifile.readline().rstrip().split(sep_char)

      try:
         pvalue_idx = header.index(pvalue_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % pvalue_field)

      ofile.write('%s' % sep_char.join(header))
      ofile.write('%s%s\n' % (sep_char, corrected_pvalue_field))
      for line in ifile:
         fields = line.rstrip().split(sep_char)
         pvalue = float(fields[pvalue_idx])
         corr_pvalue = scipy.stats.chi2.cdf(scipy.stats.chi2.ppf(pvalue, 1) / correction_factor, 1)
         ofile.write('%s' % sep_char.join(fields))
         ofile.write('%s%g\n' % (sep_char, corr_pvalue))


if __name__ == '__main__':
   args = argparser.parse_args()
   correct(args.in_file, args.pvalue_field, args.corrected_pvalue_field, args.sep, args.correction_factor, args.out_file)
