import sys
import argparse
import gzip
import re
from csg.intervaltree.IntervalTree import *

argparser = argparse.ArgumentParser('Filters association signals from GWAS or meta-analysis.')
sub_argparser = argparser.add_subparsers(title = 'suppored commands', description = '', help = '', dest = 'invoked_command')

direction_argparser = sub_argparser.add_parser('direction', help = 'Filters variants based on the number of missing direction effects after meta-analysis.')
hits_argparser = sub_argparser.add_parser('hits', help = 'Filters significant associations based on P-value.')
known_argparser = sub_argparser.add_parser('regions', help = 'Filters out associations falling into specified regions.')

direction_argparser.add_argument('--in', metavar = 'file', dest = 'in_file', required = True, type = str, help = 'Input file with association results e.g. METAL format. Input must be compressed with gzip.')
direction_argparser.add_argument('--out', metavar = 'file', dest = 'out_file', required = True, type = str, help = 'Output file name. Output is comressed with gzip.')
direction_argparser.add_argument('--sep', metavar = 'name', dest = 'sep', required = True, choices = ['comma', 'semicolon', 'tab', 'whitespace'], help = 'Fields separator. Supported values: comma, semicolon, tab, whitespace.')
direction_argparser.add_argument('--direction-field', metavar = 'name', dest = 'direction_field', required = True, type = str, help = 'Field that stores the direction of the effect for each study in meta-analysis: \'?\' - not available, \'-\' - negative, \'+\' - positive.')
direction_argparser.add_argument('--min-effects', metavar = 'number', dest = 'min_effects', required = True, type = int, help = 'Minimum number of non-missing effects (i.e. included studies) in meta-analysis.')

hits_argparser.add_argument('--in', metavar = 'file', dest = 'in_file', required = True, type = str, help = 'Input file with association results e.g. METAL format. Input must be compressed with gzip.')
hits_argparser.add_argument('--out', metavar = 'file', dest = 'out_file', required = True, type = str, help = 'Output file name. Output is comressed with gzip.')
hits_argparser.add_argument('--sep', metavar = 'name', dest = 'sep', required = True, choices = ['comma', 'semicolon', 'tab', 'whitespace'], help = 'Fields separator. Supported values: comma, semicolon, tab, whitespace.')
hits_argparser.add_argument('--pvalue-field', metavar = 'name', dest = 'pvalue_field', required = True, type = str, help = 'Field that stores association P-value.')
hits_argparser.add_argument('--max-pvalue', metavar = 'float', dest = 'max_pvalue', required = True, type = float, help = 'Maximal P-value i.e. significance threshold.')


known_argparser.add_argument('--in', metavar = 'file', dest = 'in_file', required = True, type = str, help = 'Input file with association results e.g. METAL format. Input must be compressed with gzip.')
known_argparser.add_argument('--out', metavar = 'file', dest = 'out_file', required = True, type = str, help = 'Output file name. Output is compressed with gzip.')
known_argparser.add_argument('--sep', metavar = 'name', dest = 'sep', required = True, choices = ['comma', 'semicolon', 'tab', 'whitespace'], help = 'Fields separator. Supported values: comma, semicolon, tab, whitespace.')
known_argparser.add_argument('--chrom-field', metavar = 'name regex', dest = 'chrom_field_regex', required = True, type = str, nargs = '+', help = 'First value is the field name that stores chromosome name. Optionally, second value is the regular exprassion to extract chromosome name e.g. --chrom-field ID "^([^:]+)" will extract chr11 value from chr11:71822_A1/A2 value stored in ID field.')
known_argparser.add_argument('--position-field', metavar = 'name regex', dest = 'position_field_regex', required = True, type = str, nargs = '+', help = 'First value is the field name that stores chromosomal position in base-pairs. Optionally, second value is the regular exprassion to extract position value e.g. --position-field ID "^[^:]+:([0-9]+)" will extract 71822 value from chr11:71822_A1/A2 value stored in ID field.')
known_argparser.add_argument('--regions', metavar = 'file', dest = 'regions_file', required = True, type = str, help = 'File with regions to be filtered out.')
known_argparser.add_argument('--regions-sep', metavar = 'name', dest = 'regions_sep', required = True, choices = ['comma', 'semicolon', 'tab', 'whitespace'], help = 'Fields separator in regions file. Supported values: comma, semicolon, tab, whitespace.')
known_argparser.add_argument('--regions-chrom-field', metavar = 'name', dest = 'regions_chrom_field', required = True, type = str, help = 'Regions file\'s field that stores chromosome name.')
known_argparser.add_argument('--regions-start-field', metavar = 'name', dest = 'regions_start_field', required = True, type = str, help = 'Regions file\'s field that stores start position in base-pairs.')
known_argparser.add_argument('--regions-end-field', metavar = 'name', dest = 'regions_end_field', required = True, type = str, help = 'Regions file\'s field that stores end position in base-pairs.')

def filter_associations(in_file, direction_field, sep, min_effects, out_file):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)

   with gzip.GzipFile(in_file, 'r') as ifile, gzip.GzipFile(out_file, 'w') as ofile:
      line = ifile.readline()
      if line is None:
         return
      header = line.rstrip().split(sep_char)
        
      try:
         direction_field_idx = header.index(direction_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % direction_field)

      ofile.write('%s\n' % sep_char.join(header))

      for line in ifile:
         fields = line.rstrip().split(sep_char)
         direction = fields[direction_field_idx]
         if len(direction) - direction.count('?') < min_effects:
            continue
         ofile.write('%s\n' % sep_char.join(fields))


def filter_hits(in_file, pvalue_field, sep, max_pvalue, out_file):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)

   with gzip.GzipFile(in_file, 'r') as ifile, gzip.GzipFile(out_file, 'w') as ofile:
      line = ifile.readline()
      if line is None:
         return
      header = line.rstrip().split(sep_char)
      try:
         pvalue_field_idx = header.index(pvalue_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % pvalue_field)

      ofile.write('%s\n' % sep_char.join(header))

      for line in ifile:
         fields = line.rstrip().split(sep_char)
         pvalue = float(fields[pvalue_field_idx])
         if pvalue >= max_pvalue:
            continue
         ofile.write('%s\n' % sep_char.join(fields))


def load_regions(in_file, chrom_field, start_field, end_field, sep):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)

   with gzip.GzipFile(in_file, 'r') as ifile:
      line = ifile.readline()
      if line is None:  
         return
      header = line.rstrip().split(sep_char)

      try:
         chrom_field_idx = header.index(chrom_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % chrom_field)

      try:
         start_field_idx = header.index(start_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % start_field)

      try:
         end_field_idx = header.index(end_field)
      except ValueError:
         raise Exception('Field \'%s\' was not found in input file!' % end_field)
 
      regions_by_chrom = dict()
      for line in ifile:
         fields = line.rstrip().split(sep_char)
         chrom = fields[chrom_field_idx]
         start = long(fields[start_field_idx])
         end = long(fields[end_field_idx])
         if chrom not in regions_by_chrom:
            regions_by_chrom[chrom] = IntervalTree()
         regions_by_chrom[chrom].add(start, end)
      return regions_by_chrom


def filter_known(in_file, chrom_field_regex, position_field_regex, sep, regions_by_chrom, out_file):
   if sep == 'tab':
      sep_char = '\t'
   elif sep == 'whitespace':
      sep_char = ' '
   elif sep == 'comma':
      sep_char = ','
   elif sep == 'semicolon':
      sep_char = ';'
   else:
      raise Exception('Field separator %s is not supported!' % sep)

   chrom_field = chrom_field_regex[0]
   chrom_regex = None
   position_field = position_field_regex[0]
   position_regex = None

   if len(chrom_field_regex) > 1:
      chrom_regex = re.compile(chrom_field_regex[1])
   if len(position_field_regex) > 1:
      position_regex = re.compile(position_field_regex[1])

   with gzip.GzipFile(in_file, 'r') as ifile, gzip.GzipFile(out_file, 'w') as ofile:
      line = ifile.readline()
      if line is None:   
         return          
      header = line.rstrip().split(sep_char)

      try:               
         chrom_field_idx = header.index(chrom_field)
      except ValueError: 
         raise Exception('Field \'%s\' was not found in input file!' % chrom_field)

      try:               
         position_field_idx = header.index(position_field)
      except ValueError: 
         raise Exception('Field \'%s\' was not found in input file!' % position_field)
 
      ofile.write('%s\n' % sep_char.join(header))
                         
      for line in ifile: 
         fields = line.rstrip().split(sep_char)

         if chrom_regex is not None:
            match = chrom_regex.search(fields[chrom_field_idx])
            if match is None or not match.group(1):
               raise Exception('Error while extracting chromosome name from %s!' % fields[chrom_field_idx])
            chrom = match.group(1)
         else:
            chrom = fields[chrom_field_idx]

         if position_regex is not None:
            match = position_regex.search(fields[position_field_idx])
            if match is None or not match.group(1):
               raise Exception('Error while extracting chromosomal position from %s!' % fields[position_field_idx])
            position = match.group(1)
         else:
            position = fields[position_field_idx]

         try:
            position = long(position)
         except ValueError:
            raise Exception('Error while extracting and casting to integer chromosomal position from %s!' % fields[position_field_idx]) 
 
         regions = regions_by_chrom.get(chrom, None)
         if regions is not None and any(regions.point_intersect(position)):
            continue
         ofile.write('%s\n' % sep_char.join(fields))


if __name__ == '__main__':
   args = argparser.parse_args() 
   if args.invoked_command == 'direction':
      filter_associations(args.in_file, args.direction_field, args.sep, args.min_effects, args.out_file)
   elif args.invoked_command == 'hits':
      filter_hits(args.in_file, args.pvalue_field, args.sep, args.max_pvalue, args.out_file)
   elif args.invoked_command == 'regions':
      regions_by_chrom = load_regions(args.regions_file, args.regions_chrom_field, args.regions_start_field, args.regions_end_field, args.sep)
      filter_known(args.in_file, args.chrom_field_regex, args.position_field_regex, args.sep, regions_by_chrom, args.out_file)
