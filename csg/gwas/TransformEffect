import sys
import gzip
import math
import argparse

argparser = argparse.ArgumentParser(description = 'Transform effect from linear regression model to log-OR scale. See https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5237383/ for details.')
argparser.add_argument('--in', metavar = 'file', dest = 'in_file', required = True, help = '')
argparser.add_argument('--out', metavar = 'file', dest = 'out_file', required = True, help = '')

in_header = [
   'UNIQUE_ID',
   'CHR',
   'POSITION',
   'REF_ALLELE',
   'ALT_ALLELE',
   'CODED_ALLELE',
   'NONCODED_ALLELE',
   'TOTAL',
   'CASES',
   'CONTROLS',
   'AF',
   'MAF',
   'EFFECT',
   'SE',
   'PVALUE',
   'INFO'
]

out_header = [
   'UNIQUE_ID',
   'CHR',
   'POSITION',
   'REF_ALLELE',
   'ALT_ALLELE',
   'CODED_ALLELE',
   'NONCODED_ALLELE',
   'TOTAL',
   'CASES',
   'CONTROLS',
   'AF',
   'MAF',
   'EFFECT',
   'SE',
   'PVALUE',
   'INFO',
   'EFFECT_LINEAR',
   'SE_LINEAR'
]

def transform_effect(in_file, out_file):
   with gzip.GzipFile(in_file, 'r') as ifile, gzip.GzipFile(out_file, 'w') as ofile:
      header = ifile.readline()
      if not header:
         raise Exception('No header in input file!')
      header = header.rstrip().split('\t')
      if len(header) != len(in_header) or any([i != j for i, j in zip(header, in_header)]):
         raise Exception('Input file header is not as expected!')

      ofile.write('%s\n' % '\t'.join(out_header))
      cases_idx = header.index('CASES')
      total_idx = header.index('TOTAL')
      effect_idx = header.index('EFFECT')
      se_idx = header.index('SE')

      for line in ifile:
         fields = line.rstrip().split('\t')
         cases = int(fields[cases_idx])
         total = int(fields[total_idx])
         effect = float(fields[effect_idx])
         se = float(fields[se_idx])

         prop = cases / float(total)
         correction_denom = prop * (1.0 - prop)

         out_fields = []
         for i in xrange(0, len(fields)):
            if i == effect_idx:
               effect_corrected = effect / correction_denom
               out_fields.append(str(effect_corrected))
            elif i == se_idx:
               #variance = math.pow(se, 2) * total
               #variance_corrected =  variance / math.pow(correction_denom, 2)
               #se_corrected = math.sqrt(variance_corrected / total)
               se_corrected = se / correction_denom
               out_fields.append(str(se_corrected))
            else:
               out_fields.append(fields[i])
         out_fields.append(fields[effect_idx])
         out_fields.append(fields[se_idx])

         ofile.write('%s\n' % '\t'.join(out_fields))


if __name__ == '__main__':
   args = argparser.parse_args()

   transform_effect(args.in_file, args.out_file)
